import { PuzzleExample } from '../../types/examples';
import { readFileForDay } from '../../utils/io';
import { withSameInput } from '../../utils/testUtils';
import day<DAY> from './day<DAY>'

const getPartOneExamples = (): PuzzleExample[] => [
  {
    input: [

    ],
    expected: undefined
  },
];

const getPartTwoExamples = (): PuzzleExample[] => [];
// const getPartTwoExamples = (): PuzzleExample[] => withSameInput(getPartOneExamples(), []);

describe('Day <DAY> examples', () => {
  describe('Part one examples', () => {
    it.each(getPartOneExamples())(
      'should return expected for example',
      ({ input, expected }) => expect(day<DAY>.solvePartOne(input)).toBe(expected)
    );

    it('should return expected for actual', () =>
      expect(day<DAY>.solvePartOne(readFileForDay('<DAY>'))).toBe(undefined));
  });

  describe('Part two examples', () => {
    it.each(getPartTwoExamples())(
      'should return expected for example',
      ({ input, expected }) => expect(day<DAY>.solvePartTwo(input)).toBe(expected)
    );

  it('should return expected for actual', () =>
    expect(day<DAY>.solvePartTwo(readFileForDay('<DAY>'))).toBe(undefined));
  });
});